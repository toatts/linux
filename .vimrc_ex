" Neat Vim tricks
" g CTRL-G - to get line/word count on a selection
" using <cmd>a" or <cmd>i" will preform the action on that text-object a is
" more greedy than i and deletes the delimeter.
" ; repeats the last 'f,F' 
" | can be used to line up things in columns
" find . -type f -exec sed -i 's/PetraLinkDataTEST/PetraLinkData/g' {} \;
set tabstop=4
set shiftwidth=4
set expandtab
set shiftround
syntax on
set ruler
set lazyredraw
set nowrap
set incsearch
set nohlsearch
set laststatus=2
set guioptions-=T
"set mouse=a
set nocompatible	" Use Vim defaults (much better!)
set bs=indent,eol,start		" allow backspacing over everything in insert mode
set ai			" always set autoindenting on
set autochdir
"set ofu=syntaxcomplete#Complete
" configure tags -add additional tags here
"set tags+=~/.vim/tags/centaur-diags-tags
"set tags+=/localdata/cdeloach/sandbox/oneos/branches/centaur/dev/diags/packages/expat/tags
set tags=tags;/

filetype plugin indent on

" build tags of your own project with CTRL+F12
map <F12> :!rbtags&<CR><CR>
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" automatically open and close the popup menu / preview window
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
set completeopt=menuone,menu,longest,preview

" Check out files from P4 using Ctrl-O
map  :set autoread:!p4 edit "%"

" Setup a mark so I can jump back to this spot quickly
map <F11> mZ
map <C-F11> 'Z
map <S-F11> 'X <Bar> :cclose<CR>

" easy way to step through compile errors/warnings
nmap = :cnzz
nmap - :cpzz

" Setup some easy ways to record, play, and edit macros on F5-F8
map <F5> @w
map <S-F5> qw
map <M-F5> o0D"wp
map <M-S-F5> $v0"wxdd

map <F7> :TlistOpen<CR>
map <C-H> :tabpre<CR>
map <C-L> :tabne<CR>

" Setup easy way to start and add to a buffer then paste
map <S-F9> "by
map <A-F9>   "By
map <C-S-F9> "Bd
map <F9> "bp

map <S-F8> "ay
map <A-F8>   "Ay
map <C-S-F8> "Ad
map <F8> "ap

" Set a mark 'X' at the cursor then
" Get the word under the cursor, and searches for it in the current directory
" and all subdirectories, opening the quickfix window when done.
map <F10> mX :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>
" Go up to the parent directory then search recursively.
map <S-F10> mX :execute "vimgrep /" . expand("<cword>") . "/j ../**" <Bar> cw<CR>

augroup Makefile
au!
au BufReadPre Makefile set noexpandtab
augroup END

augroup CPPFILES
au!
au BufReadPre *.cpp set cindent formatoptions=r
augroup END

augroup HPPFILES
au!
au BufReadPre *.hpp set cindent formatoptions=r
augroup END

augroup CFILES
au!
au BufReadPre *.[chv] set cindent formatoptions=r
augroup END

if &diff
    colorscheme evening
endif
    


